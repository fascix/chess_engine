refactor: apply Clean Code principles (naming, DRY, debug logs)

Apply comprehensive Clean Code refactoring following Robert C. Martin's
principles to improve code maintainability, readability and quality.

## 1. Renommage des fonctions (Clean naming)

Suppression des suffixes temporaires et noms vagues :
- search.c:
  * negamax_alpha_beta_fixed → negamax_alpha_beta
  * search_best_move_safe → search_best_move_with_min_depth
  * search_iterative_deepening_safe → search_iterative_deepening
  * order_moves_improved → order_moves
  
- evaluation.c:
  * evaluate_position_bonus → evaluate_piece_square_tables
  * evaluate_tapered → evaluate_position_interpolated
  
- uci.c:
  * apply_move_properly → apply_uci_move
  
- board.c:
  * init_halfmove_and_fullmove → reset_move_counters
  
- movegen.c:
  * generate_single_and_double_pushes → generate_pawn_pushes

Impact: Noms de fonctions explicites reflétant leur véritable intention

## 2. Élimination des duplications (DRY principle)

Factorisation du code dupliqué avec création de fonctions helper :

- search.c:
  * Suppression de restore_board_from_backup() (doublon de undo_move)
  * Remplacement par affectation directe dans quiescence_search
  
- evaluation.c:
  * Création de calculate_total_material() (réutilisée 3×)
  * Création de has_pawn_on_file() pour scanner les colonnes (réutilisée 2×)
  * Économie: ~44 lignes de code dupliqué
  
- movegen.c:
  * Création de add_pawn_capture() (élimine duplication gauche/droite)
  * Création de try_add_castle() (unifie petit/grand roque)
  * Économie: ~125 lignes de code dupliqué
  
- uci.c:
  * Refactoring logique roque avec flag is_kingside
  * Économie: ~8 lignes

Total: -24 lignes nettes (223 supprimées, 199 ajoutées)

## 3. Logs de debug conditionnels

Mise en place d'un système de logging professionnel :
- Ajout macro DEBUG_LOG dans search.c
- Remplacement de 8 fprintf(stderr) par DEBUG_LOG()
- Suppression du log "[DEBUG]" dans movegen.c
- Correction du bug de formatage (\\n → \n) dans print_movelist

Activation: compiler avec -DDEBUG pour activer les logs
Production: aucun log en mode release (performances optimales)

## Résultats

- Compilation: ✅ succès sans warnings
- Tests: ✅ engine fonctionnel (UCI + recherche depth 3)
- Binaire: 91664 → 91136 bytes (-528 bytes / -0.6%)
- Code: plus maintenable, lisible et testable

Respecte désormais les principes Clean Code:
- Nommage clair et explicite
- DRY (Don't Repeat Yourself)
- Séparation des responsabilités
- Code production-ready

